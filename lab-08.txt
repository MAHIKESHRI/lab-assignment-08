#include <iostream>
#include <vector>
#include <queue>
#include <limits.h>

using namespace std;

// Graph class using adjacency list representation
class Graph {
public:
    int V; // Number of vertices (landmarks)
    vector<vector<pair<int, int>>> adj; // Adjacency list (destination, weight)

    Graph(int V);
    void addEdge(int u, int v, int weight);
    void dijkstra(int src);
};

// Constructor for Graph
Graph::Graph(int V) {
    this->V = V;
    adj.resize(V);
}

// Method to add an edge to the graph
void Graph::addEdge(int u, int v, int weight) {
    adj[u].push_back(make_pair(v, weight));
    adj[v].push_back(make_pair(u, weight)); // For undirected graph
}

// Dijkstra's algorithm to find the shortest path from source to all vertices
void Graph::dijkstra(int src) {
    vector<int> dist(V, INT_MAX);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    dist[src] = 0;
    pq.push(make_pair(0, src)); // (distance, vertex)

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        for (auto& neighbor : adj[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            // Relaxation step
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push(make_pair(dist[v], v));
            }
        }
    }

    // Print the shortest distances
    cout << "Vertex\tDistance from Source (" << src << ")\n";
    for (int i = 0; i < V; i++) {
        cout << i << "\t\t" << dist[i] << endl;
    }
}

int main() {
    // Create a graph with landmarks
    Graph g(5); // Let's say we have 5 landmarks (0 to 4)
    g.addEdge(0, 1, 10); // Landmark 0 to Landmark 1 with distance 10
    g.addEdge(0, 2, 3);  // Landmark 0 to Landmark 2 with distance 3
    g.addEdge(1, 2, 1);  // Landmark 1 to Landmark 2 with distance 1
    g.addEdge(1, 3, 2);  // Landmark 1 to Landmark 3 with distance 2
    g.addEdge(2, 1, 4);  // Landmark 2 to Landmark 1 with distance 4
    g.addEdge(2, 3, 8);  // Landmark 2 to Landmark 3 with distance 8
    g.addEdge(2, 4, 2);  // Landmark 2 to Landmark 4 with distance 2
    g.addEdge(3, 4, 7);  // Landmark 3 to Landmark 4 with distance 7

    // Find shortest paths from source (Landmark 0)
    g.dijkstra(0);

    return 0;
}